/*
 * Copyright 2013 Canonical Ltd.
 *
 * This file is part of UnityWebappsQML.
 *
 * UnityWebappsQML is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3.
 *
 * UnityWebappsQML is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

(function () {

    if (top !== self) {
        return;
    }

    //@include UnityWebAppsUtils.js

    var callbackManager = makeCallbackManager();

    //TODO(AAU) extract to a given backend
    // Mostly handle callback atm
    navigator.qt.onmessage = function (event) {
        var message = JSON.parse(event.data);
        if (!isUnityWebappsCallbackCall(message))
            return;
        var cbfunc = callbackManager.get(message.id);
        //TODO: this should even happen in the first place
        if (!cbfunc || !(cbfunc instanceof Function))
            return;
        cbfunc(message.args);
    }

    //
    // Acknowledge that the API has been fully injected
    var sendApiCreatedAcknowledgeEvent = function () {
      var e = document.createEvent ("Events");
      e.initEvent ("ubuntu-webapps-api-ready", false, false);
      document.dispatchEvent (e);
    };

    //
    // Handles an API call, wraps all the data (callbacks etc.)
    // and dispatches to 'backend'
    // TODO should be split between backend & args related stuff
    function sendToWebview(type, data) {
        var callback = null;

        function __transformToIdIfNecessary(obj) {
            var ret = obj;
            if (obj instanceof Function) {
              var id = callbackManager.store(obj);
              ret = {callbackid: id};
            }
            return ret;
        }

        // map function callback (not serializable to a different world)
        //  to ids
        function __transformCallbacksToIds (obj) {
            if ( ! isIterableObject(obj)) {
                return __transformToIdIfNecessary (obj);
            }
            var ret = (obj instanceof Array) ? [] : {};
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if (obj[key] instanceof Function) {
                        var id = callbackManager.store(obj[key]);
                        ret[key] = {callbackid: id};
                    }
                    else if (isIterableObject (obj[key])) {
                        ret[key] = __transformCallbacksToIds (obj[key]);
                    }
                    else {
                        ret[key] = obj[key];
                    }
                }
            } // for (var key
            return ret;
        };
        var serialized_args = JSON.stringify (
            data.map (
                function (datum) {
                    var d = __transformCallbacksToIds (datum);
                    return d;
                }
            )
        );
        //TODO: use utils for arg formatting
        navigator.qt.postMessage(JSON.stringify({target: "unity-webapps-call", name: type, args: serialized_args}));
    }


    // TODO to be extracted
    var apiBuilder = function(backend) {
      var dummy = true;

      function checkString(str, allowUndef) {
        if (allowUndef && str == undefined) {
          return;
            }
        if (!str || typeof(str) !== 'string') {
          throw new TypeError("incorrect argument");
        }
      }

      var findName = function (func, prefix, obj) {

        if (!prefix) {
          return findName(func, 'Unity.', api);
        }
        var keys = Object.keys(obj);
        for (var i = 0; i < keys.length; i++) {
          if (typeof(keys[i]) !== 'string') {
            continue;
          }
          var descr = Object.getOwnPropertyDescriptor(obj, keys[i]);
          if (descr.value === func) {
            return prefix + keys[i];
          }
          if (descr.value instanceof Object) {
            var res = findName(func, prefix + keys[i] + '.', obj[keys[i]]);
            if (res)
              return res;
          }
          if (obj.__lookupGetter__(keys[i]) === func) {
            return prefix + keys[i];
          }
          if (obj.__lookupSetter__(keys[i]) === func) {
            return prefix + keys[i];
          }
        }
        return null;

      };


      var stringify = function (obj) {

        if (obj === undefined)
          return obj;
        if (obj === null)
          return obj;
        if (typeof(obj) == 'string')
          return obj;
        if (typeof(obj) == 'number')
          return obj;
        if (typeof(obj) == 'function')
          return String(obj);
        var dump = {};
        for (var i in obj) {
          if (obj.hasOwnProperty(i))
            dump[i] = stringify(obj[i]);
        }
        return dump;

      };


      var stringifyArgs = function (obj) {

        var args = [];
        for (var i = 0; i < obj.length; i++) {
          args.push(stringify(obj[i]));
        }
        var res = JSON.stringify(args);
        return res.substr(1, res.length - 2);
      };

      var createArgumentsSanitaizer = function (func, argsDesc, callback) {

        return function () {
          var realArgs = arguments;
          var name = findName(arguments.callee);

          var k = 0;
          function argumentSanitaizer(desc, arg) {
            if (!desc) {
              throw new InternalError("argument description is null");
            }
            if (desc.dummy) {
              k--;
              return null;
            }
            if (desc.array) {
              if (!(desc.array instanceof Object) || !(desc.array.element instanceof Object)) {
                throw new InternalError("invalid argument description");
              }

              try {
                for (var j = 0; j < arg.length; j++) {
                  argumentSanitaizer(desc.array.element, arg[j]);
                }
              } catch (x) {
                throw new TypeError("incorrect argument");
              }

              return arg;
            }
            if (desc.obj) {
              if (!(desc.obj instanceof Object)) {
                throw new InternalError("invalid argument description");
              }
              var res = {}, i;
              for (i in desc.obj) {
                if (desc.obj.hasOwnProperty(i)) {
                  res[i] = argumentSanitaizer(desc.obj[i], arg[i]);
                }
              }
              return res;
            }
            if (desc.str) {
              if (desc.allowNull && !arg) {
                return null;
              }
              checkString(arg, false);
              return arg;
            }
            if (desc.number) {
              if (typeof(arg) !== 'number' && typeof(arg) !== 'boolean')
                throw new TypeError("incorrect argument");
              return arg;
            }
            if (!desc.type) {
              throw new InternalError("argument description miss required parameter");
            }
            if ((arg instanceof desc.type) || (desc.type === Function && ((typeof arg) === 'function'))
                || (arg === null && desc.allowNull)) {
              if (desc.type === Function) {
                if (!arg) {
                  return null;
                }

                var id;
                if (desc.argAsCallbackId !== undefined) {
                  id = realArgs[desc.argAsCallbackId];
                }
                return function (user_data) { arg(user_data); };
              }
              return arg;
            } else {
              throw new TypeError("incorrect argument");
            }
            throw new InternalError("unreacheable");
          }
          var args = [], i;
          for (i = 0; i < argsDesc.length; i++) {
            if (k >= realArgs.length && k > 0 && !argsDesc[i].dummy) {
              throw new Error("not enough arguments");
            }

            var value = argumentSanitaizer(argsDesc[i], realArgs[k]);
            k++;

            if (argsDesc[i].obj) {
              args = args.concat(value);
            } else {
              args.push(value);
            }
          }

          if (k < realArgs.length) {
            throw new Error("too much arguments");
          }

          if (callback)
            callback.apply(null, args);

          if (func)
            return Function.apply.apply([args]);

          return null;
        };

      };
      var api = {
        init: function(props) {
          checkString(props.name, false);
          checkString(props.iconUrl, true);
          checkString(props.domain, true);
          checkString(props.login, true);
          checkString(props.mimeTypes, true);
          checkString(props.homepage, true);
          if (props.homepage && !/^(http|https|file):\/\//.test(props.homepage)) {
            throw new TypeError("incorrect argument");
          }
          if (window.location.protocol !== 'file:')
              props.__unity_webapps_hidden = {hostname: window.location.hostname, url: window.location.href};
          else
              props.__unity_webapps_hidden = {local: true};
          backend("init", [props]);
        }
        ,
        acceptData: createArgumentsSanitaizer(null,
                                              [{ array: { element: { str: true } } }, { type: Function, js: true }],
                                              function (mimeTypes, callback) {
                                                backend('acceptData', [mimeTypes, callback]);
                                              })
        ,
        addAction: createArgumentsSanitaizer(null,
                                             [{ str: true }, { type: Function, argAsCallbackId: 0 }],
                                             function (name, callback) {
                                               backend('addAction', [name, callback]);
                                             })
        ,
        clearAction: createArgumentsSanitaizer(null,
                                               [{ str: true }],
                                               function (name) {
                                                 backend('clearAction', [name]);
                                               })
        ,
        clearActions: createArgumentsSanitaizer(null,
                                                [],
                                                function () {
                                                  backend('clearActions', []);
                                                })
        ,
        MediaPlayer: {
          init: createArgumentsSanitaizer(null,
                                          [{ str: true }],
                                          function () {
                                            backend('MediaPlayer.init', []);
                                          })
          ,
          onPlayPause: createArgumentsSanitaizer(null,
                                                 [{ type: Function, allowNull: true }, { dummy: true }],
                                                 function (callback) {
                                                   backend('MediaPlayer.onPlayPause', [callback]);
                                                 }
                                                )
          ,
          onPrevious: createArgumentsSanitaizer(null,
                                                [{ type: Function, allowNull: true }, { dummy: true }],
                                               function (callback) {
                                                 backend('MediaPlayer.onPrevious', [callback]);
                                               })
          ,
          onNext: createArgumentsSanitaizer(null,
                                            [{ type: Function, allowNull: true }, { dummy: true }],
                                            function (callback) {
                                              backend('MediaPlayer.onNext', [callback]);
                                            }
                                           )
          ,
          setTrack: createArgumentsSanitaizer(null,
                                              [{ obj: { artist: { str: true, place: 0, allowNull: true },
                                                        album: { str: true, place: 1, allowNull: true },
                                                        title: { str: true, place: 2 },
                                                        artLocation: { str: true, place: 3, allowNull: true } } }],
                                             function (trackinfos) {
                                               backend('MediaPlayer.setTrack', [trackinfos]);
                                             })
          ,
          setCanGoNext: createArgumentsSanitaizer(null,
                                                  [{ number: true }],
                                                  function (v) {
                                                    backend('MediaPlayer.setCanGoNext', [v]);
                                                  }
                                                 )
          ,
          setCanGoPrevious: createArgumentsSanitaizer(null,
                                                      [{ number: true }],
                                                      function (v) {
                                                        backend('MediaPlayer.setCanGoPrevious', [v]);
                                                      }
                                                     )
          ,
          setCanPlay: createArgumentsSanitaizer(null,
                                                [{ number: true }],
                                                function (v) { backend('MediaPlayer.setCanPlay', [v]); }
                                               )
          ,
          setCanPause: createArgumentsSanitaizer(null,
                                                 [{ number: true }],
                                                 function (v) { backend('MediaPlayer.setCanPause', [v]); }
                                                )
          ,
          setPlaybackState: createArgumentsSanitaizer(null,
                                                      [{ number: true }],
                                                      function (v) { backend('MediaPlayer.setPlaybackState', [v]); }
                                                     )
          ,
          getPlaybackState: createArgumentsSanitaizer(null
                                                      , [{ type: Function }]
                                                      , function (callback) {
                                                        backend('MediaPlayer.getPlaybackState', [callback]);
                                                      }
                                                     )
          ,
          PlaybackState: {PLAYING: 0, PAUSED:1}
          ,
          // private/internal
          __get: createArgumentsSanitaizer(null,
                                          [{ str: true }, { type: Function, argAsCallbackId: 0 }],
                                          function (prop, callback) {
                                            backend('MediaPlayer.__get', [prop, callback]);
                                          }
                                         )
        },

        Notification: {
          showNotification: createArgumentsSanitaizer(null,
                                                      [{ str: true }, { str: true }, { str: true, allowNull: true }],
                                                      function (title, name, iconUrl) {
                                                          console.log(arguments);
                                                          console.log(title + ', ' + name + ', ' + iconUrl);
                                                        backend('Notification.showNotification', [title, name, dummy]);
                                                      }
                                                     )
        },

        Launcher: {
          setCount: createArgumentsSanitaizer(null,
                                              [{ number: true }],
                                              function (count) {
                                                backend('Launcher.setCount', [count]);
                                              }
                                             )
          ,
          clearCount: createArgumentsSanitaizer(null,
                                                [],
                                                function () {
                                                  backend('Launcher.clearCount', []);
                                                }),
          setProgress: createArgumentsSanitaizer(null,
                                                 [{ number: true }],
                                                 function (progress) {
                                                   backend('Launcher.setProgress', [progress]);
                                                 }
                                                )
          ,
          clearProgress: createArgumentsSanitaizer(null,
                                                   [],
                                                  function () {
                                                    backend('Launcher.clearProgress', []);
                                                  }
                                                  )
          ,
          setUrgent: createArgumentsSanitaizer(null,
                                               [],
                                               function () {
                                                 backend('Launcher.setUrgent', []);
                                               }
                                              )
          ,
          addAction: function(arg1, arg2) {
            backend('Launcher.addAction', [arg1, arg2]);
          }
          ,
          removeAction: createArgumentsSanitaizer(null,
                                                  [{ str: true }],
                                                  function (name) {
                                                    backend('Launcher.removeAction', [name]);
                                                  }
                                                 )
          ,
          removeActions: createArgumentsSanitaizer(null,
                                                   [],
                                                   function () {
                                                     backend('Launcher.removeActions', []);
                                                   }
                                                  )
          ,
          // private/internal
          __get: createArgumentsSanitaizer(null,
                                          [{ str: true }, { type: Function, argAsCallbackId: 0 }],
                                          function (prop, callback) {
                                            backend('Launcher.__get', [prop, callback]);
                                          }
                                         )
        },
        MessagingIndicator: {
          addAction: createArgumentsSanitaizer(null,
                                               [{ str: true }, { type: Function, argAsCallbackId: 0 }, { dummy: true }],
                                               function (name, callback, dummy) {
                                                 backend('MessagingIndicator.addAction', [name, callback, dummy]);
                                               }
                                              )
          ,
          showIndicator: function(name, properties) {
            backend('MessagingIndicator.showIndicator', [name, properties]);
          }
          ,
          clearIndicator: createArgumentsSanitaizer(null, [{ str: true }], function(name) { backend('MessagingIndicator.clearIndicator', [name]); }),
          clearIndicators: createArgumentsSanitaizer(null, [], function () { backend('MessagingIndicator.clearIndicators', []); })
        }
      };
      return api;
    };

    // TODO: new api object
    var api = apiBuilder(sendToWebview);

    if (!window.external)
        window.external = {};

    window.external.getUnityObject = function (version) {
        return api;
    };
    sendApiCreatedAcknowledgeEvent();

    //FIXME: for backward compatibility only, unsafeWindow was defined in the old extensions (inherited from ufe)
    //  and used in the utils.js
    unsafeWindow = window;

}) ();

