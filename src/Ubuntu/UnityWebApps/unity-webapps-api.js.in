/*
 * Copyright 2013 Canonical Ltd.
 *
 * This file is part of unity-webapps-qml.
 *
 * unity-webapps-qml is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3.
 *
 * unity-webapps-qml is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

(function () {

    if (top !== self) {
        return;
    }

    // Acknowledge that the API has been fully injected
    var sendApiCreatedAcknowledgeEvent = function () {
        var e = document.createEvent ("Events");
        e.initEvent ("ubuntu-webapps-api-ready", false, false);
        document.dispatchEvent (e);
    };

    //@include UnityWebAppsUtils.js
    //@include ./bindings/alarm-api/client/alarm-api.js
    //@include ./bindings/content-hub/client/content-hub.js
    //@include ./bindings/online-accounts/client/online-accounts.js
    //@include ./common/js/unity-binding-proxy.js
    //@include ./common/js/unity-binding-bridge.js

    var apiBuilder = function(backend) {

        //@include ./common/js/api-sanitizer.js

        var api = {
            init: function(props) {
                checkString(props.name, false);
                checkString(props.iconUrl, true);
                checkString(props.domain, true);
                checkString(props.login, true);
                checkString(props.mimeTypes, true);
                checkString(props.homepage, true);

                if (props.homepage && !/^(http|https|file):\/\//.test(props.homepage)) {
                    throw new TypeError("incorrect argument");
                }

                if (window.location.protocol !== 'file:')
                    props.__unity_webapps_hidden = {
                        hostname: window.location.hostname,
                        url: window.location.href
                    };
                else
                    props.__unity_webapps_hidden = {local: true};

                backend.call("init", [props]);
            }
            ,

            /**
             *
             * @method acceptData
             * @param mimeType {String}
             * @param callback {Function}
             */
            acceptData: createArgumentsSanitizer ([{ array: { element: { str: true } } }, { type: Function, js: true }],
                                                 'acceptData');
            ,
            /**
             *
             * @param name {String}
             * @param callback {Function}
             */
            addAction: createArgumentsSanitizer ([{ str: true }, { type: Function, argAsCallbackId: 0 }]
                                                , 'addAction')

            ,
            /**
             *
             * @param name {String}
             */
            clearAction: createArgumentsSanitizer ([{ str: true }], 'clearAction')

            ,
            /**
             *
             */
            clearActions: createArgumentsSanitizer ([], 'clearActions')
            ,

            /**
             *
             * MediaPlayer API
             *
             */
            MediaPlayer: {
                init: function() {},

                /**
                 *
                 * @param callback {Function}
                 */
                onPlayPause: createArgumentsSanitizer ([{ type: Function, allowNull: true }, { dummy: true }]
                                                       , 'MediaPlayer.onPlayPause'),

                /**
                 *
                 * @param callback {Function}
                 */
                onPrevious: createArgumentsSanitizer ([{ type: Function, allowNull: true }, { dummy: true }],
                                                      , 'MediaPlayer.onPrevious'),

                /**
                 *
                 * @param callback {Function}
                 */
                onNext: createArgumentsSanitizer ([{ type: Function, allowNull: true }, { dummy: true }]
                                                  , 'MediaPlayer.onNext'),

                /**
                 *
                 * @param callback {Function}
                 */
                setTrack: createArgumentsSanitizer([{ obj: { artist: { str: true, place: 0, allowNull: true },
                                                              album: { str: true, place: 1, allowNull: true },
                                                              title: { str: true, place: 2 },
                                                              artLocation: { str: true, place: 3, allowNull: true } } }]
                                                   , 'MediaPlayer.setTrack'),

                /**
                 *
                 * @param callback {Function}
                 */
                setCanGoNext: createArgumentsSanitizer ([{ number: true }], 'MediaPlayer.setCanGoNext'),

                /**
                 *
                 * @param callback {Function}
                 */
                setCanGoPrevious: createArgumentsSanitizer ([{ number: true }], 'MediaPlayer.setCanGoPrevious'),

                /**
                 *
                 * @param callback {Function}
                 */
                setCanPlay: createArgumentsSanitizer ([{ number: true }], 'MediaPlayer.setCanPlay'),

                /**
                 *
                 * @param callback {Function}
                 */
                setCanPause: createArgumentsSanitizer ([{ number: true }], 'MediaPlayer.setCanPause'),

                /**
                 *
                 * @param callback {Function}
                 */
                setPlaybackState: createArgumentsSanitizer ([{ number: true }], 'MediaPlayer.setPlaybackState'),

                /**
                 *
                 * @param callback {Function}
                 */
                getPlaybackState: createArgumentsSanitizer ([{ type: Function }], 'MediaPlayer.getPlaybackState'),

                PlaybackState: {PLAYING: 0, PAUSED:1},

                /**
                 * @private
                 */
                __get: createArgumentsSanitizer([{ str: true }, { type: Function, argAsCallbackId: 0 }], 'MediaPlayer.__get')
            },

            Notification: {
               /**
                *
                * @param callback {Function}
                */
                showNotification: createArgumentsSanitizer ([{ str: true }, { str: true }, { str: true, allowNull: true }]
                                                           , 'Notification.showNotification')
            },

            Launcher: {
                /**
                 *
                 * @param callback {Function}
                 */
                setCount: createArgumentsSanitizer ([{ number: true }], 'Launcher.setCount'),

                /**
                 *
                 * @param callback {Function}
                 */
                clearCount: createArgumentsSanitizer ([], 'Launcher.clearCount'),

                /**
                 *
                 * @param callback {Function}
                 */
                setProgress: createArgumentsSanitizer ([{ number: true }], 'Launcher.setProgress'),

                /**
                 *
                 * @param callback {Function}
                 */
                clearProgress: createArgumentsSanitizer ([], 'Launcher.clearProgress'),

                /**
                 *
                 * @param callback {Function}
                 */
                setUrgent: createArgumentsSanitizer ([], 'Launcher.setUrgent'),

                /**
                 *
                 * @param callback {Function}
                 */
                addAction: function(arg1, arg2) {
                    if (typeof(arg2) === 'string')
                        backend.call('Launcher.addStaticAction', [arg1, arg2]);
                    else
                        backend.call('Launcher.addAction', [arg1, arg2]);
                },

                /**
                 *
                 * @param callback {Function}
                 */
                removeAction: createArgumentsSanitizer ([{ str: true }], 'Launcher.removeAction'),

                /**
                 *
                 * @private
                 */
                removeActions: createArgumentsSanitizer ([], 'Launcher.removeActions'),

                 /**
                  *
                  * @private
                  */
                __get: createArgumentsSanitizer ([{ str: true }, { type: Function, argAsCallbackId: 0 }]
                                                , 'Launcher.__get')
            },
            MessagingIndicator: {
                /**
                 *
                 * @private
                 */
                addAction: createArgumentsSanitizer ([{ str: true }, { type: Function, argAsCallbackId: 0 }, { dummy: true }]
                                                    , 'MessagingIndicator.addAction'),

                /**
                 *
                 * @private
                 */
                showIndicator: function(name, properties) {
                    backend.call('MessagingIndicator.showIndicator', [name, properties]);
                },

                /**
                 *
                 * @private
                 */
                clearIndicator: createArgumentsSanitizer ([{ str: true }], 'MessagingIndicator.clearIndicator'),

                /**
                 *
                 * @private
                 */
                clearIndicators: createArgumentsSanitizer ([], 'MessagingIndicator.clearIndicators'),
            },

            OnlineAccounts: createOnlineAccountsApi(backend),
            Alarm: createAlarmApi(backend),
            ContentHub: createContentHubApi(backend),
        };

        return api;
    };

    var apiBridge = new UnityBindingBridge();
    var api = apiBuilder (apiBridge);

    apiBridge.setBindingApi(api);

    if (!window.external)
        window.external = {};

    window.external.getUnityObject = function (version) {
        return api;
    };

    sendApiCreatedAcknowledgeEvent();

    unsafeWindow = window;
}) ();

